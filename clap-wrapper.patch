diff --git a/cmake/shared_prologue.cmake b/cmake/shared_prologue.cmake
index 644b65b..0dcfd4a 100644
--- a/cmake/shared_prologue.cmake
+++ b/cmake/shared_prologue.cmake
@@ -133,6 +133,7 @@ function(macos_bundle_flag)
     set(oneValueArgs TARGET)
     cmake_parse_arguments(MBF "" "${oneValueArgs}" "" ${ARGN})
 
+    message(STATUS "Calling macos_bundle_flag for target ${MBF_TARGET}")
     if (NOT APPLE)
         message(WARNING "Calling macos_bundle_flag on non APPLE system. Is this intentional?")
         return()
@@ -140,10 +141,10 @@ function(macos_bundle_flag)
 
     if (NOT ${CMAKE_GENERATOR} STREQUAL "Xcode")
         add_custom_command(TARGET ${MBF_TARGET} POST_BUILD
-            WORKING_DIRECTORY $<TARGET_PROPERTY:${MBF_TARGET},LIBRARY_OUTPUT_DIRECTORY>
             COMMAND ${CMAKE_COMMAND} -E copy
                 ${CLAP_WRAPPER_CMAKE_CURRENT_SOURCE_DIR}/cmake/macBundlePkgInfo
-                "$<TARGET_PROPERTY:${MBF_TARGET},MACOSX_BUNDLE_BUNDLE_NAME>.$<TARGET_PROPERTY:${MBF_TARGET},BUNDLE_EXTENSION>/Contents/PkgInfo")
+                "$<TARGET_FILE_DIR:${MBF_TARGET}>/../PkgInfo"
+            )
     endif()
     set_target_properties(${MBF_TARGET}
             PROPERTIES
diff --git a/cmake/wrap_auv2.cmake b/cmake/wrap_auv2.cmake
index 2a3541a..da95139 100644
--- a/cmake/wrap_auv2.cmake
+++ b/cmake/wrap_auv2.cmake
@@ -113,7 +113,7 @@ function(target_add_auv2_wrapper)
         )
     endif ()
 
-    string(MAKE_C_IDENTIFIER ${AUV2_OUTPUT_NAME} outidentifier)
+    string(MAKE_C_IDENTIFIER "${AUV2_OUTPUT_NAME}" outidentifier)
 
     if ("${AUV2_BUNDLE_IDENTIFIER}" STREQUAL "")
         string(REPLACE "_" "-" repout ${outidentifier})
diff --git a/cmake/wrap_standalone.cmake b/cmake/wrap_standalone.cmake
index 19630be..e481c49 100644
--- a/cmake/wrap_standalone.cmake
+++ b/cmake/wrap_standalone.cmake
@@ -86,8 +86,8 @@ function(target_add_standalone_wrapper)
             message(STATUS "cmake-wrapper: ejecting xib->nib rules manually for ${CMAKE_GENERATOR} on ${SA_TARGET}")
             find_program(IBTOOL ibtool REQUIRED)
             add_custom_command(TARGET ${SA_TARGET} PRE_BUILD
-                    COMMAND ${CMAKE_COMMAND} -E echo ${IBTOOL} --compile "$<TARGET_PROPERTY:${SA_TARGET},MACOSX_BUNDLE_BUNDLE_NAME>.app/Contents/Resources/MainMenu.nib" ${GEN_XIB}
-                    COMMAND ${IBTOOL} --compile "$<TARGET_PROPERTY:${SA_TARGET},MACOSX_BUNDLE_BUNDLE_NAME>.app/Contents/Resources/MainMenu.nib" ${GEN_XIB}
+                    COMMAND ${CMAKE_COMMAND} -E echo ${IBTOOL} --compile "$<TARGET_FILE_DIR:${SA_TARGET}>/../Resources/MainMenu.nib" ${GEN_XIB}
+                    COMMAND ${IBTOOL} --compile "$<TARGET_FILE_DIR:${SA_TARGET}>/../Resources/MainMenu.nib" ${GEN_XIB}
                     )
         endif()
 
diff --git a/src/detail/auv2/auv2_shared.h b/src/detail/auv2/auv2_shared.h
index 45b51eb..abeda1f 100644
--- a/src/detail/auv2/auv2_shared.h
+++ b/src/detail/auv2/auv2_shared.h
@@ -38,9 +38,9 @@ struct ClapBridge
         auto fp = cs / (_clapname + ".clap");
 
         if (fs::is_directory(fp))
-          if (_library.load(fp.u8string().c_str()))
+          if (_library.load(fp.string().c_str()))
           {
-            std::cout << "[clap-wrapper] auv2 loaded clap from " << cs.u8string() << std::endl;
+            std::cout << "[clap-wrapper] auv2 loaded clap from " << cs.string() << std::endl;
             loaded = true;
             break;
           }
diff --git a/src/detail/auv2/build-helper/build-helper.cpp b/src/detail/auv2/build-helper/build-helper.cpp
index 97594de..01fa60c 100644
--- a/src/detail/auv2/build-helper/build-helper.cpp
+++ b/src/detail/auv2/build-helper/build-helper.cpp
@@ -200,7 +200,7 @@ int main(int argc, char **argv)
       auto p = fs::path{clapfile};
       // This is a hack for now - we get to the dll
       p = p.parent_path().parent_path().parent_path();
-      clapfile = p.u8string();
+      clapfile = p.string();
     }
     catch (const fs::filesystem_error &e)
     {
diff --git a/src/detail/vst3/os/macos.mm b/src/detail/vst3/os/macos.mm
index a251eed..38c875f 100644
--- a/src/detail/vst3/os/macos.mm
+++ b/src/detail/vst3/os/macos.mm
@@ -132,7 +132,7 @@ uint64_t getTickInMS()
   return (::clock() * 1000) / CLOCKS_PER_SEC;
 }
 
-std::string getParentFolderName()
+std::u8string getParentFolderName()
 {
   NSString* identifier =
       [[NSBundle bundleForClass:[clapwrapper_dummy_object_to_trick_the_os class]] bundlePath];
@@ -146,7 +146,7 @@ uint64_t getTickInMS()
     }
   }
 
-  return std::string();
+  return std::u8string();
 }
 
 std::string getBinaryName()
diff --git a/src/detail/vst3/os/osutil.h b/src/detail/vst3/os/osutil.h
index 287472c..8e269b9 100644
--- a/src/detail/vst3/os/osutil.h
+++ b/src/detail/vst3/os/osutil.h
@@ -65,7 +65,7 @@ class IPlugObject
 void attach(IPlugObject* plugobject);
 void detach(IPlugObject* plugobject);
 uint64_t getTickInMS();
-std::string getParentFolderName();
+std::u8string getParentFolderName();
 std::string getBinaryName();
 
 void log(const char* text);
diff --git a/src/wrapasvst3_entry.cpp b/src/wrapasvst3_entry.cpp
index 2a6e866..544b463 100644
--- a/src/wrapasvst3_entry.cpp
+++ b/src/wrapasvst3_entry.cpp
@@ -80,11 +80,11 @@ bool findPlugin(Clap::Library& lib, const std::string& pluginfilename)
     if (!fs::exists(i)) continue;
     // try to find it the CLAP folder immediately
     auto k1 = i / pluginfilename;
-    LOGDETAIL("scanning for binary: {}", k1.u8string().c_str());
+    LOGDETAIL("scanning for binary: {}", reinterpret_cast<const char*>(k1.u8string().c_str()));
 
     if (fs::exists(k1))
     {
-      if (lib.load(k1.u8string().c_str()))
+      if (lib.load(reinterpret_cast<const char*>(k1.u8string().c_str())))
       {
         return true;
       }
@@ -92,10 +92,10 @@ bool findPlugin(Clap::Library& lib, const std::string& pluginfilename)
 
     // Strategy 2: try to locate "CLAP/vendorX/plugY.clap"  - derived from "VST3/vendorX/plugY.vst3"
     auto k2 = i / parentfolder / pluginfilename;
-    LOGDETAIL("scanning for binary: {}", k2.u8string().c_str());
+    LOGDETAIL("scanning for binary: {}", reinterpret_cast<const char*>(k2.u8string().c_str()));
     if (fs::exists(k2))
     {
-      if (lib.load(k2.u8string().c_str()))
+      if (lib.load(reinterpret_cast<const char*>(k2.u8string().c_str())))
       {
         return true;
       }
@@ -105,10 +105,10 @@ bool findPlugin(Clap::Library& lib, const std::string& pluginfilename)
     for (const auto& subdir : fs::directory_iterator(i))
     {
       auto k3 = i / subdir / pluginfilename;
-      LOGDETAIL("scanning for binary: {}", k3.u8string().c_str());
+      LOGDETAIL("scanning for binary: {}", reinterpret_cast<const char*>(k3.u8string().c_str()));
       if (fs::exists(k3))
       {
-        if (lib.load(k3.u8string().c_str()))
+        if (lib.load(reinterpret_cast<const char*>(k3.u8string().c_str())))
         {
           return true;
         }
@@ -266,9 +266,9 @@ IPluginFactory* GetPluginFactoryEntryPoint()
         constexpr char hexchar[] = "0123456789ABCDEF";
         for (auto i = 0U; i < sizeof(g); i++)
         {
-          auto n = v[i];
-          *o++ = hexchar[(n >> 4) & 0xF];
-          *o++ = hexchar[n & 0xF];
+          auto nn = v[i];
+          *o++ = hexchar[(nn >> 4) & 0xF];
+          *o++ = hexchar[nn & 0xF];
           if (!(i % 4)) *o++ = 32;
         }
         *o++ = 0;
